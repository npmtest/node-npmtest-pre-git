{"/home/travis/build/npmtest/node-npmtest-pre-git/test.js":"/* istanbul instrument in package npmtest_pre_git */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pre-git/lib.npmtest_pre_git.js":"/* istanbul instrument in package npmtest_pre_git */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_pre_git = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_pre_git = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-pre-git/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-pre-git && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_pre_git */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_pre_git\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_pre_git.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_pre_git.rollup.js'] =\n            local.assetsDict['/assets.npmtest_pre_git.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_pre_git.__dirname + '/lib.npmtest_pre_git.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pre-git/node_modules/pre-git/src/pre-git.js":"'use strict';\n\nconst la = require('lazy-ass');\nconst check = require('check-more-types');\nconst ggit = require('ggit');\n\nvar child = require('child_process');\nvar path = require('path');\nvar fs = require('fs');\n\nconst log = require('debug')('pre-git');\n/* jshint -W079 */\nvar Promise = require('bluebird');\n\nvar label = 'pre-commit:';\n\nvar gitPrefix = process.env.GIT_PREFIX || '';\n\nfunction isAtRoot(dir) {\n  return dir === '/';\n}\n\nfunction isPackageAmongFiles(dir) {\n  var files = fs.readdirSync(dir);\n  return files.indexOf('package.json') >= 0;\n}\n\nfunction verifyValidDirectory(dir) {\n  la(check.unemptyString(dir), 'missing dir');\n\n  var cwd = process.cwd();\n  if (isAtRoot(dir)) {\n    throw new Error('Could not find package.json starting from ' + cwd);\n  } else if (!dir || dir === '.') {\n    throw new Error('Cannot find package.json from unspecified directory via ' + cwd);\n  }\n}\n\nfunction findPackage(dir) {\n  var cwd = process.cwd();\n  if (! dir) {\n    dir = path.join(cwd, gitPrefix);\n  }\n\n  if (isPackageAmongFiles(dir)) {\n    log('found package in folder', dir);\n    return path.join(dir, 'package.json');\n  }\n\n  verifyValidDirectory(dir);\n\n  // go to the parent folder and look there\n  var parentPath = path.dirname(dir);\n  if (parentPath === dir) {\n    throw new Error('Cannot got up the folder to find package.json from ' + cwd);\n  }\n  return findPackage(parentPath);\n}\n\nfunction getPackage() {\n  var filename = findPackage();\n  la(check.unemptyString(filename), 'could not find package');\n  var pkg = require(filename);\n  return pkg;\n}\n\n// returns a promise\n// Can we use ggit for this?\nfunction getProjRoot() {\n  return new Promise(function (resolve, reject) {\n    child.exec('git rev-parse --show-toplevel', function onRoot(err, output) {\n      if (err) {\n        console.error('');\n        console.error(label, 'Failed to find git root. Cannot run the tests.');\n        console.error(err);\n        console.error('');\n        return reject(new Error('Failed to find git in the project root'));\n      }\n\n      var gitRoot = output.trim();\n      var projRoot = path.join(gitRoot, gitPrefix);\n      var pkg;\n      try {\n        var file = findPackage();\n        pkg = require(file);\n        projRoot = path.dirname(file);\n      }\n      catch (e) {\n        return resolve(gitRoot);\n      }\n\n      if (pkg['pre-git-cwd']) {\n        projRoot = path.resolve(path.join(gitRoot, pkg['pre-git-cwd']));\n      }\n      return resolve(projRoot);\n    });\n  });\n}\n\n/**\n * You've failed on some of the scripts, output how much you've sucked today.\n *\n * @param {Error} err The actual error.\n * @api private\n */\nfunction failure(label, err) {\n  console.error('');\n  console.error(label, 'You\\'ve failed to pass all the hooks.');\n  console.error(label);\n\n  const chalk = require('chalk');\n  if (err instanceof Error) {\n    console.error(label, 'An Error was thrown from command');\n    if (err.ran) {\n      console.error(chalk.supportsColor ? chalk.bold.yellow(err.ran) : err.ran);\n    }\n\n    const stack = err.stack.split('\\n');\n    const firstLine = stack.shift();\n    console.error(chalk.supportsColor ? chalk.red(firstLine) : firstLine);\n    console.error(label);\n    stack.forEach(function trace(line) {\n      console.error(label, '   ' + line.trim());\n    });\n  } else {\n    console.error(label, chalk.supportsColor ? chalk.red(err) : err);\n  }\n\n  const skipOption = label === 'pre-push' ? '--no-verify' : '-n (--no-verify)';\n  const skipOptionText = chalk.supportsColor ? chalk.bold(skipOption) : skipOption;\n  console.error(label);\n  console.error(label, 'You can skip the git hook by running with', skipOptionText);\n  console.error(label);\n  console.error(label, 'But this is not advised as your tests are obviously failing.');\n  console.error('');\n\n  process.exit(1);\n}\n\nfunction getConfig() {\n  const packageName = 'pre-git';\n  const pkg = getPackage();\n  return pkg.config && pkg.config[packageName];\n}\n\nfunction getConfigProperty(propertyName) {\n  const config = getConfig();\n  if (!config) {\n    return false;\n  }\n  const property = config[propertyName];\n\n  if (!property) {\n    return false;\n  }\n\n  return property;\n}\n\nfunction hasEnabledOption(config) {\n  return 'enabled' in config;\n}\n\nfunction getTasks(label) {\n  var pkg = getPackage();\n  la(check.object(pkg), 'missing package', pkg);\n\n  const config = getConfig();\n  if (!config) {\n    return;\n  }\n\n  if (hasEnabledOption(config) && !config.enabled) {\n    return;\n  }\n\n  var run = pkg[label] ||\n    config &&\n    config[label];\n\n  if (check.string(run)) {\n    run = [run];\n  }\n  log('tasks for label \"%s\" are', label, run);\n  return run;\n}\n\nfunction hasUntrackedFiles() {\n  const config = getConfig();\n  if(config['allow-untracked-files']) {\n    return Promise.resolve(false);\n  }\n  return ggit.untrackedFiles()\n    .then(function (names) {\n      return check.unempty(names);\n    });\n}\n\nfunction runTask(root, task) {\n  console.log('executing task \"' + task + '\"');\n\n  const options = {\n    cwd: root,\n    env: process.env\n  };\n\n  return new Promise(function (resolve, reject) {\n    const proc = child.exec(task, options);\n    proc.stdout.on('data', process.stdout.write.bind(process.stdout));\n    proc.stderr.on('data', process.stderr.write.bind(process.stderr));\n    proc.on('close', function onTaskFinished(code) {\n      if (code > 0) {\n        let err = new Error(task + ' closed with code ' + code);\n        err.ran = task;\n        return reject(err);\n      }\n      return resolve('task \"' + task + '\" passed');\n    });\n  });\n}\n\nfunction checkInputs(label) {\n  if (typeof label !== 'string' || !label) {\n    throw new Error('Expected string label (pre-commit, pre-push)');\n  }\n}\n\nfunction skipPrecommit() {\n  return process.argv[2] !== 'origin';\n}\n\nfunction getSkipTest(label) {\n  const skipConditions = {\n    'pre-push': skipPrecommit\n  };\n  function dontSkip() {\n    return false;\n  }\n  const skip = skipConditions[label] || dontSkip;\n  return skip;\n}\n\n// returns a promise\nfunction runAtRoot(root, label) {\n  log('running %s at root %s', label, root);\n  log('cli arguments', process.argv);\n  la(check.unemptyString(label), 'missing label', label);\n  const skip = getSkipTest(label);\n  if (skip()) {\n    log('skipping tasks for', label);\n    return Promise.resolve();\n  }\n\n  function showError(message) {\n    console.error('');\n    console.error(label, message);\n    console.error('');\n    return Promise.reject(new Error(message));\n  }\n\n  function noUntrackedFiles(foundUntrackedFiles) {\n    if (foundUntrackedFiles) {\n      return showError('Cannot commit with untracked files present.');\n    }\n  }\n\n  if (!root) {\n    return showError('Failed to find git root. Cannot run the tests.');\n  }\n\n  function runTasksForLabel() {\n    var tasks = getTasks(label);\n    log('tasks for %s', label, tasks);\n\n    if (!tasks || !tasks.length) {\n      console.log('');\n      console.log(label, 'Nothing the hook needs to do. Bailing out.');\n      console.log('');\n      return Promise.resolve('Nothing to do for ' + label);\n    }\n\n    const runTaskAt = runTask.bind(null, root);\n    return Promise.each(tasks, runTaskAt);\n  }\n\n  if (label === 'pre-commit') {\n    return hasUntrackedFiles()\n      .then(noUntrackedFiles)\n      .then(runTasksForLabel);\n  }\n  return runTasksForLabel();\n}\n\nfunction run(hookLabel) {\n  log('running', hookLabel);\n  checkInputs(hookLabel);\n\n  label = hookLabel;\n\n  // TODO should the failure action be outside?\n  return getProjRoot()\n    .tap((root) => log('running', hookLabel, 'in', root))\n    .then((root) => runAtRoot(root, hookLabel))\n    .catch((err) => failure(hookLabel, err));\n}\n\nfunction errorMessage(err) {\n  return err instanceof Error ? err.message : err;\n}\n\nfunction printError(x) {\n  console.error(errorMessage(x) || 'Unknown error');\n}\n\nfunction isBuiltInWizardName(name) {\n  la(check.unemptyString(name), 'invalid name', name);\n  const builtIn = {\n    simple: true,\n    conventional: true,\n    'cz-conventional-changelog': true\n  };\n  return builtIn[name];\n}\n\nfunction loadWizard(name) {\n  la(check.unemptyString(name), 'missing commit wizard name', name);\n  const moduleNames = {\n    simple: 'simple-commit-message',\n    conventional: 'conventional-commit-message',\n    'cz-conventional-changelog': 'conventional-commit-message'\n  };\n  const loadName = moduleNames[name];\n  la(check.unemptyString(loadName),\n    'Unknown commit message wizard name', name);\n  log('loading wizard', loadName, 'for name', name);\n  return require(loadName);\n}\n\nfunction getWizardName() {\n  const config = getConfig();\n  const defaultName = 'simple';\n  log('commit message wizard name from', config);\n  if (!config) {\n    log('no config, using default name', defaultName);\n    return defaultName;\n  }\n  if (config.wizard) {\n    la(check.unemptyString(config.wizard), 'expected wizard name', config.wizard);\n    log('using wizard name', config.wizard);\n    return config.wizard;\n  }\n\n  const value = config['commit-msg'];\n  if (check.unemptyString(value)) {\n    log('using config commit-msg property', value);\n    return value;\n  }\n  if (check.array(value) && value.length === 1) {\n    log('using config commit-msg single value', value);\n    return value[0];\n  }\n}\n\nfunction pickWizard() {\n  const wizardName = getWizardName();\n  if (!wizardName) {\n    log('no wizard name set');\n    return;\n  }\n  log('using commit message wizard %s', wizardName);\n\n  const wiz = isBuiltInWizardName(wizardName) ?\n    loadWizard(wizardName) : require(wizardName);\n  la(check.fn(wiz.prompter), 'missing wizard prompter', wizardName, wiz);\n  return wiz;\n}\n\nfunction customCommitMsgPattern() {\n  return getConfigProperty('msg-pattern');\n\n}\n\nfunction customCommitMsgPatternError() {\n  return getConfigProperty('msg-pattern-error');\n}\n\nmodule.exports = {\n  run: run,\n  getTasks: getTasks,\n  getProjRoot: getProjRoot,\n  printError: printError,\n  wizard: pickWizard,\n  hasUntrackedFiles: hasUntrackedFiles,\n  customMsgPattern: customCommitMsgPattern,\n  customMsgPatternError: customCommitMsgPatternError\n};\n\nif (!module.parent) {\n  run('demo-error', () => true)\n    .then(() => log('finished all tasks'))\n    .done();\n}\n","/home/travis/build/npmtest/node-npmtest-pre-git/node_modules/pre-git/bin/commit-msg.js":"#!/usr/bin/env node\n\n'use strict';\n\nconst ggit = require('ggit');\nconst preGit = require('pre-git');\nconst la = require('lazy-ass');\nconst check = require('check-more-types');\nconst log = require('debug')('pre-git');\n\nfunction checkMessageAgainstPattern(msg, pattern) {\n\n  var regex = new RegExp(pattern);\n  \n  if (!regex.test(msg)) {\n\n    var msgError = preGit.customMsgPatternError();\n\n    if(msgError) {\n      console.error(msgError);\n      console.error('');\n    }\n\n    log('invalid commit message, must match the following pattern: ' + pattern, msg);\n    process.exit(-1);\n  }\n\n  return true;\n\n}\n\nfunction checkMessage(msg) {\n\n  const msgPattern = preGit.customMsgPattern();\n  \n  if (msgPattern) {\n    checkMessageAgainstPattern(msg, msgPattern);\n  }\n\n  const wizard = preGit.wizard();\n  if (!wizard) {\n    log('no commit message wizard defined');\n    process.exit(0);\n  }\n\n  log('found commit message wizard with name', wizard.name);\n\n  la(check.fn(wizard.validate),\n      'missing wizard validate method,', Object.keys(wizard));\n  la(check.fn(preGit.printError),\n      'missing preGit.printError,', Object.keys(preGit));\n\n  log('checking commit message:', msg);\n  const isValid = wizard.validate(msg);\n  if (!isValid) {\n    log('invalid commit message', msg);\n    process.exit(-1);\n  }\n  log('valid git commit message');\n}\n\nggit.commitMessage()\n  .then((msg) => {\n    return process.env.TEST_GIT_MESSAGE || msg;\n  })\n  .then(checkMessage)\n  .catch((err) => {\n    // assuming each validator printed the errors?\n    console.error(err);\n    process.exit(-1);\n  })\n  .done();\n","/home/travis/build/npmtest/node-npmtest-pre-git/node_modules/pre-git/bin/commit-wizard.js":"#!/usr/bin/env node\n\nconsole.log('running commit-wizard in folder %s', process.cwd());\nconst la = require('lazy-ass');\nconst check = require('check-more-types');\nconst join = require('path').join;\nconst pkgPath = join(process.cwd(), 'package.json');\nconst pkg = require(pkgPath);\nconst preGit = require('pre-git');\nconst git = require('ggit');\nconst chalk = require('chalk');\nconst log = require('debug')('pre-git');\nla(check.fn(log), 'missing debug log', log);\n\n/* jshint -W079 */\nconst Promise = require('bluebird');\n\nconst label = 'pre-commit';\n\nconst config = pkg.config &&\n  pkg.config['pre-git'];\n\nconst wizard = preGit.wizard();\nla(check.maybe.object(wizard),\n  'could not get commit message wizard', wizard);\n\nfunction getPreCommitCommands(config) {\n  if (!config) {\n    return;\n  }\n  const preCommit = config[label];\n  if (check.unemptyString(preCommit)) {\n    return [preCommit];\n  }\n  return preCommit;\n}\n\nfunction hasPreCommitCommands(config) {\n  return check.unemptyArray(getPreCommitCommands(config));\n}\n\nvar start = Promise.resolve(git.hasChanges())\n  .then(function (hasSomethingToCommit) {\n    if (!hasSomethingToCommit) {\n      console.log('Nothing to commit');\n      process.exit(0);\n    }\n  });\n\nif (hasPreCommitCommands(config)) {\n  console.log('package %s has pre-commit commands', pkg.name);\n  console.log(getPreCommitCommands(config).join(', '));\n  const run = preGit.run;\n  la(check.fn(run), 'missing pre git run');\n  const runLabeled = run.bind(null, label);\n\n  start = start\n    .then(runLabeled)\n    .then(() => console.log('finished pre-commit check'));\n}\n\n/* jshint -W098 */\nfunction guideUserMock() {\n  return Promise.resolve('fix(git): fixing commit wizard');\n}\n\nfunction guideUser() {\n  if (!wizard) {\n    console.error(chalk.yellow('You have not set the commit message format'));\n    console.error('This wizard does not know what to ask you');\n    console.error('Maybe try setting up \"simple\" commit message format');\n    console.error('See',\n      chalk.underline('https://github.com/bahmutov/pre-git#validating-commit-message'));\n    return Promise.reject(new Error('Missing commit format name'));\n  }\n\n  const inquirer = require('inquirer');\n\n  return new Promise(function (resolve, reject) {\n    wizard.prompter(inquirer, (message) => {\n      if (!message) {\n        return reject(new Error('No commit message'));\n      }\n      return resolve(message);\n    });\n  });\n}\n\nfunction commitWithMessage(commitMessage) {\n  la(check.unemptyString(commitMessage), 'missing commit message', commitMessage);\n  const gitCommit = git.commit;\n  return gitCommit(commitMessage)\n    .then(console.log.bind(console));\n}\n\nfunction errorMessage(err) {\n  return err instanceof Error ? err.message : err;\n}\n\nfunction firstLine(str) {\n  la(check.string(str), 'expected a string, got', str);\n  return str.split('\\n').shift();\n}\n\nfunction isValidMessage(message) {\n  if (!wizard) {\n    return message;\n  }\n\n  la(check.unemptyString(message), 'missing message');\n\n  const first = firstLine(message);\n\n  if (!check.unemptyString(first)) {\n    return Promise.reject(new Error('missing first line'));\n  }\n  if (check.fn(wizard.validate)) {\n    if (!wizard.validate(message)) {\n      return Promise.reject(new Error('Invalid commit message\\n' + message));\n    }\n  }\n  return message;\n}\n\nfunction success() {\n  console.log('commit wizard has finished');\n}\n\nstart\n  .then(guideUser)\n  .then((message) => message.trim())\n  .tap((message) => console.log(message))\n  .then(isValidMessage)\n  .then(commitWithMessage)\n  .then(success)\n  .catch((err) => {\n    console.error(errorMessage(err));\n    process.exit(-1);\n  })\n  .done();\n\n","/home/travis/build/npmtest/node-npmtest-pre-git/node_modules/pre-git/bin/post-checkout.js":"#!/usr/bin/env node\n\n'use strict';\n\nconst label = 'post-checkout';\nconst run = require('pre-git').run;\nconst runTask = run.bind(null, label);\n\nrunTask()\n  .done();\n","/home/travis/build/npmtest/node-npmtest-pre-git/node_modules/pre-git/bin/post-commit.js":"#!/usr/bin/env node\n\n'use strict';\n\nconst label = 'post-commit';\nconst run = require('pre-git').run;\nconst runTask = run.bind(null, label);\n\nrunTask()\n  .done();\n","/home/travis/build/npmtest/node-npmtest-pre-git/node_modules/pre-git/bin/post-merge.js":"#!/usr/bin/env node\n\n'use strict';\n\nconst label = 'post-merge';\nconst run = require('pre-git').run;\nconst runTask = run.bind(null, label);\n\nrunTask()\n  .done();\n","/home/travis/build/npmtest/node-npmtest-pre-git/node_modules/pre-git/bin/pre-commit.js":"#!/usr/bin/env node\n\n'use strict';\n\nconst log = require('debug')('pre-git');\n\n/* jshint -W079 */\nconst Promise = require('bluebird');\n\nvar child = require('child_process');\nvar label = 'pre-commit';\n\nfunction isForced() {\n  log(label, 'arguments', process.argv);\n  return process.argv.some(function (arg) {\n    return arg === '-f' || arg === '--force';\n  });\n}\n\nfunction errorMessage(err) {\n  return err instanceof Error ? err.message : err;\n}\n\n// should we exit if there are no changes to commit?\n\n// resolved => there are changes to commit\n// rejected => might be an Error or nothing.\n//   if nothing => not changes to commit\nfunction haveChangesToCommit() {\n  return new Promise(function (resolve, reject) {\n    if (isForced()) {\n      console.log('forcing pre-commit execution');\n      return resolve();\n    }\n\n    child.exec('git status --porcelain', function changes(err, status) {\n      if (err) {\n        console.error(label, 'Failed to check for changes. Cannot run the tests.');\n        console.error(err);\n        return process.exit(1);\n      }\n\n      return status.trim().length ? resolve() : reject();\n    });\n  });\n}\n\nfunction printNothingToDo() {\n  console.log('');\n  console.log(label, 'No changes detected, bailing out.');\n  console.log('');\n}\n\nconst hasUntrackedFiles = require('pre-git').hasUntrackedFiles;\nconst run = require('pre-git').run;\nconst runTask = run.bind(null, label);\n\nconsole.log('running bin/pre-commit.js script');\nhaveChangesToCommit()\n  .then(hasUntrackedFiles)\n  .then((has) => {\n    if (has) {\n      const message = 'Has untracked files in folder.\\n' +\n        'Please delete or ignore them.';\n      return Promise.reject(new Error(message));\n    }\n  })\n  .then(runTask, (err) => {\n    if (err) {\n      console.error(errorMessage(err));\n      process.exit(-1);\n    }\n    printNothingToDo();\n  })\n  .catch((err) => {\n    console.error(label, 'A problem');\n    console.error(errorMessage(err));\n    process.exit(-1);\n  })\n  .done();\n\n","/home/travis/build/npmtest/node-npmtest-pre-git/node_modules/pre-git/bin/pre-push.js":"#!/usr/bin/env node\n\n'use strict';\n\nconst log = require('debug')('pre-git');\n\n/* jshint -W079 */\nconst Promise = require('bluebird');\n\nconst child = require('child_process');\nconst label = 'pre-push';\n\nfunction failed(err) {\n  console.error(label, 'Check went wrong.');\n  console.error(label, err);\n  return process.exit(1);\n}\n\n// todo: find if there are commits to push for any remote name / any branch\n// detect current branch\nfunction haveCommitsToPush() {\n  return new Promise(function (resolve, reject) {\n    child.exec('git rev-parse --abbrev-ref HEAD', function (err, stdout) {\n      log('rev-parse results', err, stdout);\n      if (err) {\n        console.error('git rev-parse failed');\n        return failed(err);\n      }\n\n      var branch = 'master';\n      if (stdout.trim().length) {\n        branch = stdout.trim();\n      }\n      child.exec('git ls-remote --heads origin ' + branch, function (err, stdout) {\n        log('ls-remote results', err, stdout);\n        if (err) {\n          console.error('git ls-remote failed');\n          return failed(err);\n        }\n\n        if (!stdout.trim().length) {\n          console.log('New branch \"' + branch + '\", pushing...');\n          return resolve();\n        }\n\n        child.exec('git diff --name-only origin/' + branch + '..HEAD', function (err, stdout) {\n          log('diff --names-only results', err, stdout);\n          if (err) {\n            console.error('git diff failed');\n            return failed(err);\n          }\n\n          if (!stdout.trim().length) {\n            return reject();\n          }\n          console.log(label, 'Detected files in diff:',  stdout.trim().split('\\n').length);\n          resolve();\n        });\n      });\n    });\n  });\n}\n\nfunction printNothingToDo() {\n  console.log('');\n  console.log(label, 'No local commits detected, bailing out.');\n  console.log('');\n}\n\nconst run = require('pre-git').run;\nconst runTask = run.bind(null, label);\n\nhaveCommitsToPush()\n  .then(runTask, (err) => {\n    if (err) {\n      return failed(err);\n    }\n    printNothingToDo();\n    process.exit(0);\n  })\n  .done();\n","/home/travis/build/npmtest/node-npmtest-pre-git/node_modules/pre-git/src/install.js":"'use strict';\n\nvar pkg = require('../package');\nconsole.log('%s %s in %s', pkg.name, pkg.version, process.cwd());\n\nvar path = require('path');\nvar join = path.join;\nvar fs = require('fs');\nvar read = fs.readFileSync;\nvar write = fs.writeFileSync;\n\n//\n// Compatiblity with older node.js.\n//\nvar existsSync = fs.existsSync || path.existsSync;\n\nvar isForced = process.argv.some(function (argument) {\n  return argument === '-f' || argument === '--force';\n});\n\nfunction readJsonFile(filename) {\n  return JSON.parse(read(filename));\n}\n\nfunction writeJsonToFile(filename, object) {\n  console.log('saving updated files %s', filename);\n  write(filename, JSON.stringify(object, null, 2));\n}\n\n(function avoidSelfInstall() {\n  if (isForced) {\n    return;\n  }\n  // only install hook if this is executed from folder\n  // that is dependency of the current root path\n  // package A\n  //    node_modules/pre-git\n  // installs pre-git hook for package A\n  var pkgPath = 'node_modules' + path.sep + pkg.name;\n  // we are constructing RegExp using paths, that can\n  // use \\ (Windows) as path separator. Need to escape \\\n  // before constructing the RegExp.\n  pkgPath = pkgPath.replace('\\\\', '\\\\\\\\');\n  var nameRegex = new RegExp(pkgPath + '$');\n  if (!nameRegex.test(process.cwd())) {\n    console.log('running install inside self, no need');\n    console.log('cwd', process.cwd());\n    console.log('pkgPath', pkgPath);\n    process.exit(0);\n  }\n}());\n\n//\n// The root of repository.\n//\nvar root = path.resolve(__dirname, '../..');\nfunction getRootPackagePath() {\n  return join(root, 'package.json');\n}\n\nvar exec = require('shelljs').exec;\nvar result = exec('git rev-parse --show-toplevel');\nif (result.code === 0) {\n  root = path.resolve(result.output.trim());\n}\n\n//\n// The location .git and it's hooks\n//\nvar git = path.resolve(root, '.git');\nvar hooks = path.resolve(git, 'hooks');\n\n//\n// Check if we are in a git repository so we can bail out early when this is not\n// the case.\n//\nif (!existsSync(git) || !fs.lstatSync(git).isDirectory()) {\n  console.error('Could not find git repo in ' + git);\n  process.exit(0);\n}\n\n(function () {\n  if (!existsSync(hooks)) {\n    fs.mkdirSync(hooks);\n  }\n}());\nconsole.log('git hooks folder %s', hooks);\n\nvar hookScripts = ['commit-msg',\n  'pre-commit', 'pre-push', 'post-commit', 'post-checkout', 'post-merge'];\n\nvar sourceHooksFolders = join(__dirname, '../hooks');\n\nif (existsSync(sourceHooksFolders)) {\n  hookScripts.forEach(installHook);\n} else {\n  console.log('cannot find hooks folder %s', sourceHooksFolders);\n}\n\nfunction missingCommitScript(pkg) {\n  return !pkg.scripts ||\n    !pkg.scripts.commit ||\n    /node_modules\\/commitizen/.test(pkg.scripts.commit);\n}\n\nfunction setupMessageValidation(pkg) {\n  if (!pkg.scripts) {\n    pkg.scripts = {};\n  }\n  pkg.scripts.commit = 'commit-wizard';\n}\n\n(function addToPackage(hookNames) {\n  var pkgPath = getRootPackagePath(),\n    targetPackage;\n  if (existsSync(pkgPath)) {\n    targetPackage = readJsonFile(pkgPath);\n    console.log('read target package from %s', pkgPath);\n  } else {\n    console.log('could not find package under path %s', pkgPath);\n    return;\n  }\n\n  if (!targetPackage.config) {\n    targetPackage.config = {};\n  }\n\n  if (!targetPackage.config['pre-git']) {\n    targetPackage.config['pre-git'] = {};\n    var config = targetPackage.config['pre-git'];\n\n    hookNames.forEach(function addProperty(hookName) {\n      if (hookName === 'commit-msg') {\n        config[hookName] = 'simple';\n        console.log('set simple %s format', hookName);\n      } else {\n        config[hookName] = [];\n        console.log('added empty command list for hook %s', hookName);\n      }\n    });\n\n    if (missingCommitScript(targetPackage)) {\n      setupMessageValidation(targetPackage);\n    }\n\n    writeJsonToFile(pkgPath, targetPackage);\n  }\n\n}(hookScripts));\n\nfunction installHook(name) {\n  console.log('installing hook %s', name);\n\n  var targetHookFilename = path.resolve(hooks, name);\n  //\n  // Our own hook runner.\n  //\n  var fullname = join(sourceHooksFolders, name);\n  if (!existsSync(fullname)) {\n    throw new Error('Cannot find hook file to copy ' + fullname);\n  }\n  var hook = read(fullname);\n\n  //\n  // If there's an existing `pre-commit` hook we want to back it up instead of\n  // overriding it and losing it completely\n  //\n  if (existsSync(targetHookFilename)) {\n    console.log('');\n    console.log(name + ': Detected an existing git hook');\n    write(targetHookFilename + '.old', read(targetHookFilename));\n    console.log(name + ': Old hook backuped to .old');\n    console.log('');\n  }\n\n  //\n  // Everything is ready for the installation of the pre-commit hook. Write it and\n  // make it executable.\n  //\n  write(targetHookFilename, hook);\n  fs.chmodSync(targetHookFilename, '755');\n}\n"}